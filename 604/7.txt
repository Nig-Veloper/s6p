#AIM: WAP to parse XML text, generate web graph and compute topics of specific page.

#THEORY:

XML: XML stands for eXtensible Markup Language. It was designed to store and transport data. It was
designed to be both human- and machine-readable. That’s why, the design goals of XML emphasize
simplicity, generality, and usability across the Internet.
The XML file to be parsed in this tutorial is actually a RSS feed.

RSS: RSS(Rich Site Summary, often called Really Simple Syndication) uses a family of standard web feed
formats to publish frequently updated information like blog entries, news headlines, audio, video. RSS is
XML formatted plain text.
The code will:
• Load RSS feed from specified URL and save it as an XML file.
• Parse the XML file to save news as a list of dictionaries where each dictionary is a single news item.
• Save the news items into a CSV file.

Loading and saving RSS feed:
Here, we first created a HTTP response object by sending an HTTP request to the URL of the RSS feed.
The content of response now contains the XML file data which we save as topnewsfeed.xml in our local
directory.

Parsing XML:
We have created parseXML() function to parse XML file. We know that XML is an inherently hierarchical
data format, and the most natural way to represent it is with a tree.
Here, we are using xml.etree.ElementTree (call it ET, in short) module. Element Tree has two classes for
this purpose – ElementTree represents the whole XML
document as a tree, and Element represents a single node in this tree. Interactions with the whole
document (reading and writing to/from files) are usually done on the ElementTree level. Interactions
with a single XML element and its sub-elements are done on the Element level.
getroot() function return the root of tree as an Element object.

./channel/item is actually XPath syntax (XPath is a language for addressing parts of an XML document).
Here, we want to find all item grand-children of channel children of the root(denoted by ‘.’) element.
Now, we know that we are iterating through item elements where each item element contains one
news. So, we create an empty news dictionary in which we will store all data available about news item.
To iterate though each child element of an element, we simply iterate through it.
child.attrib is a dictionary of all the attributes related to an element. Here, we are interested
in url attribute of media:content namespace tag.
child.tag contains the name of child element. child.text stores all the text inside that child element.
Then, we simply append this dict element to the list newsitems.

Saving data to a CSV file:
Now, we simply save the list of news items to a CSV file so that it could be used or modified easily in
future using savetoCSV() function.

#CODE:

import xml.dom.minidom


def parse_xml(xml_string):
    # parse the xml string
    dom = xml.dom.minidom.parseString(xml_string)

    # get the root element
    root = dom.documentElement

    # print the tag name of the root element
    print("Root element: " + root.tagName)

    # get all child nodes of the root element
    nodes = root.childNodes

    # iterate over each child node
    for node in nodes:
        # check if the node is an element node
        if node.nodeType == xml.dom.minidom.Node.ELEMENT_NODE:
            # print the tag name of the element node
            print("Element node: " + node.tagName)

            # get all attributes of the element node
            attrs = node.attributes

            # iterate over each attribute
            for attr_name in attrs.keys():
                # get the attribute value
                attr_value = attrs.get(attr_name).nodeValue
                # print the attribute name and value
                print("  Attribute: " + attr_name + " = " + attr_value)

            # check if the element node has any child nodes
            if node.hasChildNodes():
                # get the first child node
                child = node.firstChild

                # iterate over all child nodes
                while child:
                    # check if the child node is an element node
                    if child.nodeType == xml.dom.minidom.Node.ELEMENT_NODE:
                        # print the tag name of the element node
                        print("  Element node: " + child.tagName)
                        # print the text content of the element node
                        print("    Text: " + child.firstChild.nodeValue.strip())

                    # get the next sibling node
                    child = child.nextSibling


# example usage
xml_string = '''<Employee>
                    <name>John Doe</name>
                    <age>19</age>
                    <location>Mira Road</location>
                    <skills name="python"/>
                    <skills name="javascript"/>
                    <skills name="xml"/>
                </Employee>'''
parse_xml(xml_string)
