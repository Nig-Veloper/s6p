#AIM: Implement dynamic programming algo for computing the “Edit Distance” between two strings

s1 & s2. (HINT: Levenshtein distance)

#THEORY:
Edit Distance
Given two strings str1 and str2 and below operations that can performed on str1. Find minimum
number of edits (operations) required to convert ‘str1’ into ‘str2’.
• Insert
• Remove
• Replace
All of the above operations are of equal cost.
Examples:
Input: str1 = "geek", str2 = "gesek"
Output: 1
We can convert str1 into str2 by inserting a 's'.
Input: str1 = "cat", str2 = "cut"
Output: 1
We can convert str1 into str2 by replacing 'a' with 'u'.
Input: str1 = "sunday", str2 = "saturday"
Output: 3
Last three and first characters are same. We basically
need to convert "un" to "atur". This can be done using
below three operations.
Replace 'n' with 'r', insert t, insert a

#CODE:
class Main {
public int editDistanceRecursion(String s1, String s2, int m, int n){
if(m==0) return n;
if(n==0) return m;
if(s1.charAt(m-1)==s2.charAt(n-1))
return editDistanceRecursion(s1,s2,m-1,n-1);
return 1 + Math.min(editDistanceRecursion(s1, s2, m, n-1),
Math.min(editDistanceRecursion(s1,s2,m-1,n),
editDistanceRecursion(s1, s2, m-1, n-1)
));

}
public static void main(String[] args) {
String s1 = "saturday";
String s2 = "sunday";
Main ed = new Main();
System.out.println("Minimum Edit Distance: " + ed.editDistanceRecursion(s1, s2,
s1.length(), s2.length()));
}
}

#OUTPUT:
3